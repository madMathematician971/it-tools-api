name: Deploy

on:
  workflow_run:
    workflows:
      - Build
      - Bump Minor Version
    types:
      - completed

jobs:
  deploy_images:
    name: Deploy Docker Images
    if: >-
      github.event.workflow_run.conclusion == 'success' &&
      startsWith(github.event.workflow_run.head_branch, 'release/')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and dev dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv sync --only-dev
      - name: Extract version
        id: extract_version
        run: |
          echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push FastMCP image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: fastmcp
          push: true
          tags: |
            madmathematician971/mcp-it-tools-fastmcp:latest
            madmathematician971/mcp-it-tools-fastmcp:${{ env.VERSION }}

  create_release:
    name: Create Release Tag
    if: >-
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and dev dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv sync --only-dev
      - name: Extract version
        id: extract_version
        run: |
          echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
      - name: Create and push Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          body: "Release v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
