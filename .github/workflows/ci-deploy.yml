name: Deploy

on:
  push:
    branches:
      - 'release/*'
  workflow_run:
    workflows:
      - Bump Minor Version
    types:
      - completed

jobs:
  create_release:
    name: Create Release and Tag
    if: >-
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Install uv and dev dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv sync --only-dev

      - name: Extract version
        id: extract_version
        run: |
          echo "VERSION=$(uv run --no-sync poetry version -s)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.VERSION }}
          release_name: v${{ steps.extract_version.outputs.VERSION }}
          body: "Release v${{ steps.extract_version.outputs.VERSION }}"
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                
      - name: Create and push release branch
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b "release/v${{ steps.extract_version.outputs.VERSION }}"
          git push origin "release/v${{ steps.extract_version.outputs.VERSION }}"

  deploy_images:
    name: Deploy Docker Images
    if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    environment: production
    steps:
        - uses: actions/checkout@v4

        - name: Install uv and dev dependencies
          run: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            uv sync --only-dev

        - name: Extract version
          id: extract_version
          run: |
            echo "VERSION=$(uv run --no-sync poetry version -s)" >> $GITHUB_OUTPUT

        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build and push FastMCP image
          uses: docker/build-push-action@v5
          with:
            context: .
            target: fastmcp
            push: true
            tags: |
              madmathematician971/mcp-it-tools-fastmcp:latest
              madmathematician971/mcp-it-tools-fastmcp:${{ steps.extract_version.outputs.VERSION }}
